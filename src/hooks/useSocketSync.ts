import { useEffect, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import { useCommandsContext } from '../components/Commands/CommandsContext';
import { Command } from '../types';
import { SOCKET_CONFIG } from '../config/socket';

export const useSocketSync = () => {
  const socketRef = useRef<Socket | null>(null);
  const { commands, syncCommandCreate, syncCommandUpdate, syncCommandDelete } = useCommandsContext();

  useEffect(() => {
    // Initialiser la connexion Socket.IO
    socketRef.current = io(SOCKET_CONFIG.SERVER_URL, SOCKET_CONFIG.CONNECTION_OPTIONS);

    const socket = socketRef.current;

    // Ã‰vÃ©nement de connexion
    socket.on('connect', () => {
      console.log('ðŸ”Œ ConnectÃ© au serveur Socket.IO');
    });

    // Ã‰vÃ©nement de dÃ©connexion
    socket.on('disconnect', () => {
      console.log('ðŸ”Œ DÃ©connectÃ© du serveur Socket.IO');
    });

    // Ã‰couter les Ã©vÃ©nements de synchronisation des commandes
    socket.on('COMMAND_CREATED', (data: { command: Command }) => {
      console.log('ðŸ“¡ Ã‰vÃ©nement COMMAND_CREATED reÃ§u:', data);
      const { command } = data;
      
      // Utiliser la fonction de synchronisation du contexte
      syncCommandCreate(command);
    });

    socket.on('COMMAND_UPDATED', (data: { commandId: string; updates: Partial<Command> }) => {
      console.log('ðŸ“¡ Ã‰vÃ©nement COMMAND_UPDATED reÃ§u:', data);
      const { commandId, updates } = data;
      
      // Utiliser la fonction de synchronisation du contexte
      syncCommandUpdate(commandId, updates);
    });

    socket.on('COMMAND_DELETED', (data: { commandId: string }) => {
      console.log('ðŸ“¡ Ã‰vÃ©nement COMMAND_DELETED reÃ§u:', data);
      const { commandId } = data;
      
      // Utiliser la fonction de synchronisation du contexte
      syncCommandDelete(commandId);
    });

    socket.on('STATUS_CHANGED', (data: { commandId: string; newStatus: string; progression: number }) => {
      console.log('ðŸ“¡ Ã‰vÃ©nement STATUS_CHANGED reÃ§u:', data);
      const { commandId, newStatus, progression } = data;
      
      // Utiliser la fonction de synchronisation du contexte
      syncCommandUpdate(commandId, { statut: newStatus as any, progression });
    });

    socket.on('STEP_UPDATED', (data: { commandId: string; stepId: string; updates: any }) => {
      console.log('ðŸ“¡ Ã‰vÃ©nement STEP_UPDATED reÃ§u:', data);
      const { commandId, stepId, updates } = data;
      
      // Pour les mises Ã  jour d'Ã©tapes, on doit mettre Ã  jour la commande complÃ¨te
      const currentCommand = commands.find(cmd => cmd._id === commandId || cmd.id === commandId);
      if (currentCommand) {
        // Si on a les Ã©tapes complÃ¨tes dans les updates, les utiliser
        if (updates.etapesProduction) {
          // Calculer la nouvelle progression basÃ©e sur les Ã©tapes mises Ã  jour
          const completedSteps = updates.etapesProduction.filter((e: any) => e.statut === 'completed').length;
          const newProgression = Math.round((completedSteps / updates.etapesProduction.length) * 100);
          
          syncCommandUpdate(commandId, {
            etapesProduction: updates.etapesProduction,
            progression: newProgression
          });
          console.log('ðŸ“¡ Progression calculÃ©e et mise Ã  jour:', newProgression);
        } else {
          // Sinon, mettre Ã  jour seulement l'Ã©tape spÃ©cifique
          const updatedEtapes = currentCommand.etapesProduction?.map(etape => 
            etape._id === stepId 
              ? { ...etape, ...updates }
              : etape
          ) || [];
          
          // Calculer la nouvelle progression
          const completedSteps = updatedEtapes.filter(e => e.statut === 'completed').length;
          const newProgression = Math.round((completedSteps / updatedEtapes.length) * 100);
          
          syncCommandUpdate(commandId, {
            etapesProduction: updatedEtapes,
            progression: newProgression
          });
          console.log('ðŸ“¡ Progression calculÃ©e et mise Ã  jour:', newProgression);
        }
      }
    });

    socket.on('COMMAND_FULLY_UPDATED', (data: { command: Command }) => {
      console.log('ðŸ“¡ Ã‰vÃ©nement COMMAND_FULLY_UPDATED reÃ§u:', data);
      console.log('ðŸ“¡ Progression reÃ§ue:', data.command.progression);
      console.log('ðŸ“¡ Ã‰tapes reÃ§ues:', data.command.etapesProduction?.length);
      const { command } = data;
      
      const commandId = command._id || command.id;
      if (commandId) {
        // Mettre Ã  jour la commande complÃ¨te avec toutes ses propriÃ©tÃ©s
        syncCommandUpdate(commandId, {
          ...command,
          progression: command.progression,
          etapesProduction: command.etapesProduction,
          statut: command.statut
        });
        console.log('ðŸ“¡ Commande mise Ã  jour via syncCommandUpdate avec progression:', command.progression);
      }
    });

    // Nettoyage lors du dÃ©montage
    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, [syncCommandCreate, syncCommandUpdate, syncCommandDelete, commands]);

  return socketRef.current;
}; 